import networkx as nx
import matplotlib.pyplot as plt
from collections import defaultdict
import json


def generate_graph(node, edge):
    """
    This function creates the connected peer to peer network of the bazaar randomly by taking number of nodes and the number of vertices.
    It makes sure that a path exists between peers. It returns an object of two elements, edges and node. Edges
    is an array of tuple of nodes, and node is an array of node elements. The final connected adjacency list is stored in bazaar.json
    Args:
        node: number of peers
        vertices: max number of edges in the graph
    Returns:
        Graph: {Edge: [()], node:[]}
    """
    while True:
        d = defaultdict(list)
        # Generate
        G = nx.gnm_random_graph(node,edge)
        edges = G.edges
        # Making sure that the graph is connected
        if not nx.is_connected(G):
            continue
        for key,value in edges:
            d[key].append(value)
            d[value].append(key)
        is_found = False
        # Check for neighbours not exceeding 
        for _, values in d.items():
            if len(values)>3:
                is_found = True
                break
        if is_found:
            continue
        return G


def create_bazar(peer_list, show_bazar=True):
    """
    This function converts the graph generated by the generate graph function to the required bazaar
    format of buyers and sellers. It creates an adjacency list and stores it in a json file.
    Args:
        peer_list [] : list of peer ids 
    Returns:
        Edges [()] : array of connected edges 
    """
    G = generate_graph(len(peer_list),len(peer_list)+2)
    edges = G.edges
    pos_dict = {}
    for i, peer in enumerate(peer_list):
        pos_dict[i] = peer
    if show_bazar:
        nx.draw_networkx(G,labels = pos_dict,with_labels=True,node_color="red")
        print("Showing the graphical representation of the bazaar")
        # Start the plt.show as a seperate thread so that application can proceed to run
        plt.show(block=False)
        plt.pause(5)
    adj_list = defaultdict(list)
    for peer_1,peer_2 in edges:
        adj_list[pos_dict[peer_1]].append(pos_dict[peer_2])
        adj_list[pos_dict[peer_2]].append(pos_dict[peer_1])
    
    json_object = json.dumps(adj_list)
    with open("bazaar.json", "w") as outfile:
        outfile.write(json_object)
    return G.edges



